;------------------------------------------------------------
;
; Copyright (c) 2013-2015 Altium Limited
;
; This software is the proprietary, copyrighted property of
; Altium Ltd. All Right Reserved.
;
; SVN revision information:
; $Rev: 14907 $:
; $Date: 2015-01-19 13:30:51 +0100 (Mon, 19 Jan 2015) $:
;
;------------------------------------------------------------

[Plugin]
Name=interrupts
Implement=interrupts
Require0=pal
FrameworkCompileOption0=-DPAL_INTERRUPTS
SourceFile0=$(SWP_RELPATH)\src\interrupts.c
Caption=Interrupt Management
Description=Interrupt management routines

[Option0]
Name=VECTOR_BASE
Caption=Vector Base Address
Description=The base address where the interrupt vector table will be located in internal processor memory. This value will be written to the 16-bit exception base register ($EB) during startup. All vector table slots in use will be located relative to this address. By default the base address is 0x100.
Kind=UINT16
MinRange=0x8
NoGenerate=True
GenerateLinkerDefine=__EXCEPTION_BASE
DefaultValue=0x100

[Option0_Available_If0]
Kind=ENVIRONMENT
Object=TOOLCHAIN
Condition=EQ
Value=TASKING 3000

[Option1]
Name=APPLICATION_MASK
Caption=Application ISR Mask
Description=Interrupt mask for interrupts not part of the software plaform. Set the N-th bit in this mask (31..0) if your application defines a handler (ISR) for interrupt N. Examples: specify 0x8 for interrupt 3, specify 0xA for interrupts 1 and 3.
Kind=UINT32
DefaultValue=0x0

[Option2]
Name=MAX_HANDLERS
Caption=Maximum Number of Interrupt Handlers
Description=The maximum number of interrupt handlers simultaneously in use by the application.
Kind=UINT8
MinRange=1
DefaultValue=32

[Option3]
Name=HASH_SIZE
Caption=Interrupt Handler Entry Table Size
Description=Internal hash table for interrupt handler lookup. To be able to limit the amount of memory used by interrupt handling functionality.
Kind=UINT8
MinRange=1
DefaultValue=32

[Option4]
Name=EXCEPTION_ADDRESS
Caption=Exception Address
Description=Processor Exception Address
Kind=UINT32
MinRange=0
MaxRange=4294967292
DefaultValue=0x100

[Option4_Available_If0]
Kind=ENVIRONMENT
Object=TOOLCHAIN
Condition=EQ
Value=TASKING NiosII

[Option5]
Name=INTRHANDLERMODE
Caption=Handler Mode
Description=Interrupt handler location and operation. Normal: exception handler is at 'Exception Address'. Jumped: At 'Exception Address' there is a jump to the exception handler, exception handler is at 'Jump Address'. Jump only: only the jump to the exception handler is in the program (code containing the exception handler will be loaded later). Handler only: only the exception handler is in the code, the jump to the handler from the exception address is handled by code that's not part of the program.
Kind=ENUM
DefaultValue=Normal
Enum0=Normal
Enum1=Jumped
Enum2=Jumped_Jump_Only
Enum3=Jumped_Destination_Only
EnumDescription0=Interrupt handler at 'Exception Address'
EnumDescription1=Jump to interrupt handler at 'Exception Address', interrupt handler at 'Jump Address'
EnumDescription2=Jump to 'Jump Address' at 'Exception Address', no actual interrupt handler
EnumDescription3=Interrupt handler at 'Jump Address', no code to jump to interrupt handler

[Option5_Available_If0]
Kind=ENVIRONMENT
Object=TOOLCHAIN
Condition=EQ
Value=TASKING NiosII

[Option6]
Name=EXCEPTION_HANDLER_ADDRESS
Caption=Jump Address
Description=Address for exception handler. Used when Mode equals 'Jumped' or 'Jumped_Destination_Only'. Jump code is at 'Exception Address' handler code is at 'Jump Address'
Kind=UINT32
DefaultValue=0x01000100

[Option6_Available_If0]
Kind=ENVIRONMENT
Object=TOOLCHAIN
Condition=EQ
Value=TASKING NiosII
