// Copyright 2020 Thomas.Hoehenleitner [at] seerose.net
// Use of this source code is governed by a license that can be found in the LICENSE file.

package decoder

import (
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"sync"
	"testing"

	"github.com/rokath/trice/internal/emitter"
	"github.com/rokath/trice/internal/id"
	"github.com/rokath/trice/pkg/msg"
	"github.com/tj/assert"
)

type u1Table struct {
	fmtStrg string
	value   uint32
	expStrg string
}

var uTable1 = []u1Table{
	{"%u", 200, "200"},
	{"%d", 127, "127"},
	{"%d", 128, "-128"},
	{"%u", 128, "128"},
	{"%u", 255, "255"},
	{"%d", 255, "-1"},
	{"%05u", 200, "00200"},
	{"aaa%5u", 200, "aaa  200"},
	{"aaa%%7u.%u", 200, "aaa%7u.200"},
	{"%%%%7u.%u", 200, "%%7u.200"},
}

func Test_trice81(t *testing.T) {
	p := &Flex{}
	p.b = make([]byte, defaultSize)
	p.iBuf = make([]byte, defaultSize)
	for _, v := range uTable1 {
		p.b = p.b[:defaultSize]
		p.trice.Strg = v.fmtStrg
		p.d0 = v.value
		exp := v.expStrg
		n, e := p.trice81()
		assert.Nil(t, e)
		p.b = p.b[:n]
		act := string(p.b)
		assert.Equal(t, exp, act)
	}
}

type u2Table struct {
	fmtStrg string
	v0, v1  uint32
	expStrg string
}

var uTable2 = []u2Table{
	{"%c%c", 'a', 'b', "ab"},
	{"%u%u", 200, 200, "200200"},
	{"%d%u", 127, 128, "127128"},
	{"%%u.%%x%u%d", 128, 128, "%u.%x128-128"}, // to do: need to fix: when x == % error
	//{"%%%u%d", 128, 128, "%128-128"},          // to do: need to fix: when more than 2 %% come together -> error
}

func Test_trice82(t *testing.T) {
	p := &Flex{}
	p.b = make([]byte, defaultSize)
	p.iBuf = make([]byte, defaultSize)
	for _, v := range uTable2 {
		p.b = p.b[:defaultSize]
		p.trice.Strg = v.fmtStrg
		p.d0 = (v.v0 << 8) | v.v1
		exp := v.expStrg
		n, e := p.trice82()
		assert.Nil(t, e)
		p.b = p.b[:n]
		act := string(p.b)
		assert.Equal(t, exp, act)
	}
}

type uNTable struct {
	fmtStrg string
	v       []uint32
	expStrg string
}

var uTable4 = []uNTable{
	{"%c%c%c%c", []uint32{'a', 'b', 'c', 'd'}, "abcd"},
	{"%d%u%d%u", []uint32{127, 128, 127, 128}, "127128127128"},
}

func Test_trice84(t *testing.T) {
	p := &Flex{}
	p.b = make([]byte, defaultSize)
	p.iBuf = make([]byte, defaultSize)
	for _, v := range uTable4 {
		p.b = p.b[:defaultSize]
		p.trice.Strg = v.fmtStrg
		p.d0 = (v.v[0] << 24) | (v.v[1] << 16) | (v.v[2] << 8) | v.v[3]
		exp := v.expStrg
		n, e := p.trice84()
		assert.Nil(t, e)
		p.b = p.b[:n]
		act := string(p.b)
		assert.Equal(t, exp, act)
	}
}

func TestFlexLoutOfSync(t *testing.T) {
	tt := testTable{ // little endian
		{[]byte{81, 48, 80, 134}, `--------------------------------------------------`},
		{[]byte{81, 48, 80, 134}, "warning:Cycle 81 does not match expected cyle 82 - lost trice messages?\n--------------------------------------------------"},
		{[]byte{88, 82, 48, 80, 134}, "error: unknown triceID 20528 ignoring first byte [88 82 48 80 134]\n--------------------------------------------------"},
		{[]byte{188, 83, 48, 80, 134}, "error: unknown triceID 20528 ignoring first byte [188 83 48 80 134]\n--------------------------------------------------"},
		{[]byte{88, 88, 83, 48, 80, 134}, "error: unknown triceID 12371 ignoring first byte [88 88 83 48 80 134]\nerror: unknown triceID 20528 ignoring first byte [88 83 48 80 134]\nwarning:Cycle 83 does not match expected cyle 84 - lost trice messages?\n--------------------------------------------------"},
		{[]byte{1, 124, 227, 255, 0, 0, 4, 0}, "warning:Cycle 1 does not match expected cyle 84 - lost trice messages?\nMSG: triceFifoMaxDepth = 4, select = 0"},
		{[]byte{2, 124, 227, 255, 0, 0, 4, 0}, "MSG: triceFifoMaxDepth = 4, select = 0"},
		{[]byte{88, 3, 124, 227, 255, 0, 0, 4, 0}, "error: unknown triceID 814976 ignoring first byte [88 3 124 227 255 0 0 4]\nMSG: triceFifoMaxDepth = 4, select = 0"},
	}
	doTableTest(t, NewFlexDecoder, littleEndian, tt)
}

func TestFlexL(t *testing.T) {
	doTableTest(t, NewFlexDecoder, littleEndian, tableL)
}

func TestFlex(t *testing.T) {
	doTableTest(t, NewFlexDecoder, bigEndian, tableB)
}

func Example_rub4() {
	TestTableMode = true
	lut := make(id.TriceIDLookUp)
	m := new(sync.RWMutex)
	msg.OnErr(lut.FromJSON([]byte(til)))
	lut.AddFmtCount()
	buf := make([]byte, defaultSize)
	dec := NewFlexDecoder(lut, m, nil, littleEndian) // p is a new decoder instance

	table := testTable{
		{[]byte{1, 124, 227, 255, 0, 0, 4, 0}, `MSG: triceFifoMaxDepth = 4, select = 0`},
		{[]byte{2, 239, 245, 135, 224, 255, 31, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0}, ` !"#$%&'()*+,-./0123456789:;<=>`},
	}
	for _, x := range table {
		in := ioutil.NopCloser(bytes.NewBuffer(x.in))
		dec.setInput(in)
		var err error
		var n int
		var act string
		for nil == err {
			n, err = dec.Read(buf)
			if io.EOF == err && 0 == n {
				break
			}
			a := fmt.Sprint(string(buf[:n]))
			if emitter.SyncPacketPattern != a {
				act += a // ignore sync packets
			}
		}
		fmt.Println(act + "},")
		testTableVirgin = true
	}
	// Output:
	// { []byte{   1,124,227,255,  0,  0,  4,  0,MSG: triceFifoMaxDepth = 4, select = 0\n},
	// { []byte{   2,239,245,135,224,255, 31,  0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,  0, !"#$%&'()*+,-./0123456789:;<=>\n},
}

var tableL = testTable{ // little endian
	{[]byte{0, 56, 17, 133}, `s:                                                   \ns:   MDK-ARM_LL_UART_RTT0_FLEX_STM32F030_NUCLEO-64   \ns:                                                   \n`},
	{[]byte{1, 124, 227, 255, 0, 0, 4, 0}, `MSG: triceFifoMaxDepth = 4, select = 0`},
	{[]byte{2, 124, 227, 255, 1, 0, 8, 0}, `MSG: triceFifoMaxDepth = 8, select = 1`},
	{[]byte{3, 124, 227, 255, 2, 0, 8, 0}, `MSG: triceFifoMaxDepth = 8, select = 2`},
	{[]byte{4, 183, 194, 134, 247, 255, 8, 0, 0, 0, 0, 0, 109, 0, 0, 0}, `rd:trice64 109`},
	{[]byte{5, 124, 227, 255, 3, 0, 24, 0}, `MSG: triceFifoMaxDepth = 24, select = 3`},
	{[]byte{6, 105, 174, 134, 1, 0, 0, 0}, `rd:1`},
	{[]byte{7, 202, 74, 133, 2, 1, 0, 0}, `rd:1, 2`},
	{[]byte{8, 179, 12, 133, 3, 2, 1, 0}, `rd:1, 2, 3`},
	{[]byte{9, 220, 27, 132, 4, 3, 2, 1}, `rd:1, 2, 3, 4`},
	{[]byte{10, 111, 184, 132, 250, 255, 5, 0, 4, 3, 2, 1, 5, 0, 0, 0}, `rd:1, 2, 3, 4, 5`},
	{[]byte{11, 151, 189, 134, 249, 255, 6, 0, 4, 3, 2, 1, 6, 5, 0, 0}, `rd:1, 2, 3, 4, 5, 6`},
	{[]byte{12, 199, 159, 132, 248, 255, 7, 0, 4, 3, 2, 1, 7, 6, 5, 0}, `rd:1, 2, 3, 4, 5, 6, 7`},
	{[]byte{13, 247, 128, 133, 247, 255, 8, 0, 4, 3, 2, 1, 8, 7, 6, 5}, `rd:1, 2, 3, 4, 5, 6, 7, 8`},
	{[]byte{14, 26, 151, 133, 1, 0, 0, 0}, `rd:1`},
	{[]byte{15, 92, 129, 134, 2, 0, 1, 0}, `rd:1, 2`},
	{[]byte{16, 87, 209, 135, 249, 255, 6, 0, 2, 0, 1, 0, 3, 0, 0, 0}, `rd:1, 2, 3`},
	{[]byte{17, 151, 28, 132, 247, 255, 8, 0, 2, 0, 1, 0, 4, 0, 3, 0}, `rd:1, 2, 3, 4`},
	{[]byte{18, 100, 68, 132, 1, 0, 0, 0}, `rd:1`},
	{[]byte{19, 135, 149, 133, 247, 255, 8, 0, 1, 0, 0, 0, 2, 0, 0, 0}, `rd:1, 2`},
	{[]byte{20, 79, 162, 135, 243, 255, 12, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0}, `rd:1, 2, 3`},
	{[]byte{21, 199, 156, 135, 239, 255, 16, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0}, `rd:1, 2, 3, 4`},
	{[]byte{22, 55, 29, 135, 247, 255, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0}, `rd:1`},
	{[]byte{23, 31, 45, 135, 239, 255, 16, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0}, `rd:1, 2`},
	{[]byte{24, 201, 201, 134, 1, 0, 0, 0}, `rd:1`},
	{[]byte{25, 2, 66, 134, 2, 1, 0, 0}, `rd:1, 2`},
	{[]byte{26, 67, 227, 132, 3, 2, 1, 0}, `rd:1, 2, 3`},
	{[]byte{27, 244, 192, 135, 4, 3, 2, 1}, `rd:1, 2, 3, 4`},
	{[]byte{28, 207, 36, 133, 250, 255, 5, 0, 4, 3, 2, 1, 5, 0, 0, 0}, `rd:1, 2, 3, 4, 5`},
	{[]byte{29, 103, 233, 132, 249, 255, 6, 0, 4, 3, 2, 1, 6, 5, 0, 0}, `rd:1, 2, 3, 4, 5, 6`},
	{[]byte{30, 143, 199, 134, 248, 255, 7, 0, 4, 3, 2, 1, 7, 6, 5, 0}, `rd:1, 2, 3, 4, 5, 6, 7`},
	{[]byte{31, 79, 80, 135, 247, 255, 8, 0, 4, 3, 2, 1, 8, 7, 6, 5}, `rd:1, 2, 3, 4, 5, 6, 7, 8`},
	{[]byte{32, 42, 38, 132, 1, 0, 0, 0}, `rd:1`},
	{[]byte{33, 252, 223, 132, 2, 0, 1, 0}, `rd:1, 2`},
	{[]byte{34, 103, 98, 132, 249, 255, 6, 0, 2, 0, 1, 0, 3, 0, 0, 0}, `rd:1, 2, 3`},
	{[]byte{35, 79, 143, 132, 247, 255, 8, 0, 2, 0, 1, 0, 4, 0, 3, 0}, `rd:1, 2, 3, 4`},
	{[]byte{36, 172, 47, 134, 1, 0, 0, 0}, `rd:1`},
	{[]byte{37, 31, 223, 132, 247, 255, 8, 0, 1, 0, 0, 0, 2, 0, 0, 0}, `rd:1, 2`},
	{[]byte{38, 167, 165, 135, 243, 255, 12, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0}, `rd:1, 2, 3`},
	{[]byte{39, 111, 20, 133, 239, 255, 16, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0}, `rd:1, 2, 3, 4`},
	{[]byte{40, 63, 186, 132, 247, 255, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0}, `rd:1`},
	{[]byte{41, 183, 196, 132, 239, 255, 16, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0}, `rd:1, 2`},
	{[]byte{42, 124, 227, 255, 4, 0, 0, 2}, `MSG: triceFifoMaxDepth = 512, select = 4`},
	{[]byte{43, 161, 213, 133, 1, 0, 0, 0}, `rd:1`},
	{[]byte{44, 154, 242, 135, 2, 1, 0, 0}, `rd:1, 2`},
	{[]byte{45, 43, 40, 134, 3, 2, 1, 0}, `rd:1, 2, 3`},
	{[]byte{46, 132, 168, 134, 4, 3, 2, 1}, `rd:1, 2, 3, 4`},
	{[]byte{47, 103, 194, 134, 250, 255, 5, 0, 4, 3, 2, 1, 5, 0, 0, 0}, `rd:1, 2, 3, 4, 5`},
	{[]byte{48, 247, 155, 135, 249, 255, 6, 0, 4, 3, 2, 1, 6, 5, 0, 0}, `rd:1, 2, 3, 4, 5, 6`},
	{[]byte{49, 63, 140, 134, 248, 255, 7, 0, 4, 3, 2, 1, 7, 6, 5, 0}, `rd:1, 2, 3, 4, 5, 6, 7`},
	{[]byte{50, 183, 209, 135, 247, 255, 8, 0, 4, 3, 2, 1, 8, 7, 6, 5}, `rd:1, 2, 3, 4, 5, 6, 7, 8`},
	{[]byte{51, 202, 32, 133, 1, 0, 0, 0}, `rd:1`},
	{[]byte{52, 84, 250, 134, 2, 0, 1, 0}, `rd:1, 2`},
	{[]byte{53, 191, 60, 133, 249, 255, 6, 0, 2, 0, 1, 0, 3, 0, 0, 0}, `rd:1, 2, 3`},
	{[]byte{54, 71, 82, 135, 247, 255, 8, 0, 2, 0, 1, 0, 4, 0, 3, 0}, `rd:1, 2, 3, 4`},
	{[]byte{55, 76, 231, 135, 1, 0, 0, 0}, `rd:1`},
	{[]byte{56, 175, 230, 134, 247, 255, 8, 0, 1, 0, 0, 0, 2, 0, 0, 0}, `rd:1, 2`},
	{[]byte{57, 103, 236, 135, 243, 255, 12, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0}, `rd:1, 2, 3`},
	{[]byte{58, 87, 159, 134, 239, 255, 16, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0}, `rd:1, 2, 3, 4`},
	{[]byte{59, 15, 75, 135, 247, 255, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0}, `rd:1`},
	{[]byte{60, 143, 47, 133, 239, 255, 16, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0}, `rd:1, 2`},
	{[]byte{61, 145, 55, 134, 1, 0, 0, 0}, `rd:1`},
	{[]byte{62, 106, 37, 135, 2, 1, 0, 0}, `rd:1, 2`},
	{[]byte{63, 19, 230, 133, 3, 2, 1, 0}, `rd:1, 2, 3`},
	{[]byte{64, 172, 98, 134, 4, 3, 2, 1}, `rd:1, 2, 3, 4`},
	{[]byte{65, 175, 202, 134, 250, 255, 5, 0, 4, 3, 2, 1, 5, 0, 0, 0}, `rd:1, 2, 3, 4, 5`},
	{[]byte{66, 239, 190, 133, 249, 255, 6, 0, 4, 3, 2, 1, 6, 5, 0, 0}, `rd:1, 2, 3, 4, 5, 6`},
	{[]byte{67, 111, 135, 135, 248, 255, 7, 0, 4, 3, 2, 1, 7, 6, 5, 0}, `rd:1, 2, 3, 4, 5, 6, 7`},
	{[]byte{68, 231, 72, 134, 247, 255, 8, 0, 4, 3, 2, 1, 8, 7, 6, 5}, `rd:1, 2, 3, 4, 5, 6, 7, 8`},
	{[]byte{69, 18, 125, 134, 1, 0, 0, 0}, `rd:1`},
	{[]byte{70, 100, 216, 135, 2, 0, 1, 0}, `rd:1, 2`},
	{[]byte{71, 39, 43, 132, 249, 255, 6, 0, 2, 0, 1, 0, 3, 0, 0, 0}, `rd:1, 2, 3`},
	{[]byte{72, 95, 35, 132, 247, 255, 8, 0, 2, 0, 1, 0, 4, 0, 3, 0}, `rd:1, 2, 3, 4`},
	{[]byte{73, 156, 60, 134, 1, 0, 0, 0}, `rd:1`},
	{[]byte{74, 167, 62, 134, 247, 255, 8, 0, 1, 0, 0, 0, 2, 0, 0, 0}, `rd:1, 2`},
	{[]byte{75, 191, 27, 132, 243, 255, 12, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0}, `rd:1, 2, 3`},
	{[]byte{76, 79, 96, 134, 239, 255, 16, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0}, `rd:1, 2, 3, 4`},
	{[]byte{77, 215, 119, 134, 247, 255, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0}, `rd:1`},
	{[]byte{78, 191, 29, 133, 239, 255, 16, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0}, `rd:1, 2`},
	{[]byte{79, 124, 227, 255, 5, 0, 0, 2}, `MSG: triceFifoMaxDepth = 512, select = 5`},
	{[]byte{80, 48, 121, 132}, `--------------------------------------------------`},
	{[]byte{81, 48, 80, 134}, `--------------------------------------------------`},
	{[]byte{82, 122, 91, 135, 57, 48, 0, 0}, `dbg:12345 as 16bit is 0b0011000000111001`},
	{[]byte{83, 160, 93, 133}, `--------------------------------------------------`},
	{[]byte{84, 88, 227, 134}, `sig:This ASSERT error is just a demo and no real error:`},
	{[]byte{85, 80, 237, 135}, `--------------------------------------------------`},
	{[]byte{86, 192, 248, 135}, `--------------------------------------------------`},
	{[]byte{87, 192, 248, 135}, `--------------------------------------------------`},
	{[]byte{88, 130, 244, 135, 57, 48, 0, 0}, `dbg:12345 as 16bit is 0b0011000000111001`},
	{[]byte{89, 192, 248, 135}, `--------------------------------------------------`},
	{[]byte{90, 144, 239, 135}, `sig:This ASSERT error is just a demo and no real error:`},
	{[]byte{91, 192, 248, 135}, `--------------------------------------------------`},
	{[]byte{92, 130, 147, 135, 192, 175, 0, 0}, `ERR:error       message, SysTick is  44992`},
	{[]byte{93, 66, 224, 132, 96, 174, 0, 0}, `WRN:warning     message, SysTick is  44640`},
	{[]byte{94, 226, 197, 132, 0, 173, 0, 0}, `ATT:attention   message, SysTick is  44288`},
	{[]byte{95, 170, 98, 133, 160, 171, 0, 0}, `DIA:diagnostics message, SysTick is  43936`},
	{[]byte{96, 26, 7, 134, 64, 170, 0, 0}, `TIM:timing      message, SysTick is  43584`},
	{[]byte{97, 50, 77, 132, 224, 168, 0, 0}, `DBG:debug       message, SysTick is  43232`},
	{[]byte{98, 58, 125, 133, 128, 167, 0, 0}, `SIG:signal      message, SysTick is  42880`},
	{[]byte{99, 74, 51, 133, 32, 166, 0, 0}, `RD:read         message, SysTick is  42528`},
	{[]byte{100, 26, 205, 134, 192, 164, 0, 0}, `WR:write        message, SysTick is  42176`},
	{[]byte{101, 170, 86, 133, 96, 163, 0, 0}, `ISR:interrupt   message, SysTick is  41824`},
	{[]byte{102, 250, 111, 132, 0, 162, 0, 0}, `MSG:normal      message, SysTick is  41472`},
	{[]byte{103, 58, 147, 133, 160, 160, 0, 0}, `INFO:informal   message, SysTick is  41120`},
	{[]byte{104, 58, 162, 135, 31, 158, 0, 0}, `ERR:error       message, SysTick is  40479`},
	{[]byte{105, 74, 80, 129, 229, 156, 0, 0}, `WRN:warning     message, SysTick is  40165`},
	{[]byte{106, 2, 36, 130, 170, 155, 0, 0}, `ATT:attention   message, SysTick is  39850`},
	{[]byte{107, 66, 128, 133, 112, 154, 0, 0}, `DIA:diagnostics message, SysTick is  39536`},
	{[]byte{108, 202, 58, 135, 53, 153, 0, 0}, `TIM:timing      message, SysTick is  39221`},
	{[]byte{109, 42, 253, 128, 246, 151, 0, 0}, `DBG:debug       message, SysTick is  38902`},
	{[]byte{110, 18, 244, 130, 188, 150, 0, 0}, `SIG:signal      message, SysTick is  38588`},
	{[]byte{111, 2, 115, 135, 129, 149, 0, 0}, `RD:read         message, SysTick is  38273`},
	{[]byte{112, 18, 66, 132, 71, 148, 0, 0}, `WR:write        message, SysTick is  37959`},
	{[]byte{113, 98, 226, 131, 12, 147, 0, 0}, `ISR:interrupt   message, SysTick is  37644`},
	{[]byte{114, 122, 245, 134, 210, 145, 0, 0}, `MSG:normal      message, SysTick is  37330`},
	{[]byte{115, 114, 162, 129, 151, 144, 0, 0}, `INFO:informal   message, SysTick is  37015`},
	{[]byte{116, 124, 227, 255, 6, 0, 0, 2}, `MSG: triceFifoMaxDepth = 512, select = 6`},
	{[]byte{117, 178, 157, 130, 124, 185, 0, 0}, `tst:trice16_1   message, SysTick is  47484`},
	{[]byte{118, 178, 157, 130, 26, 184, 0, 0}, `tst:trice16_1   message, SysTick is  47130`},
	{[]byte{119, 226, 233, 132, 188, 182, 0, 0}, `tst:trice16_1   message, SysTick is  46780`},
	{[]byte{120, 178, 157, 130, 92, 181, 0, 0}, `tst:trice16_1   message, SysTick is  46428`},
	{[]byte{121, 180, 253, 135, 254, 179, 0, 0}, `tst:trice32_1   message, SysTick is  46078`},
	{[]byte{122, 212, 191, 134, 161, 178, 0, 0}, `tst:trice32_1   message, SysTick is  45729`},
	{[]byte{123, 12, 27, 132, 70, 177, 0, 0}, `tst:trice32_1   message, SysTick is  45382`},
	{[]byte{124, 180, 253, 135, 234, 175, 0, 0}, `tst:trice32_1   message, SysTick is  45034`},
	{[]byte{125, 234, 81, 129, 97, 173, 0, 0}, `time:TRICE16_1   message, SysTick is  44385`},
	{[]byte{126, 234, 81, 129, 38, 172, 0, 0}, `time:TRICE16_1   message, SysTick is  44070`},
	{[]byte{127, 234, 81, 129, 236, 170, 0, 0}, `time:TRICE16_1   message, SysTick is  43756`},
	{[]byte{128, 234, 81, 129, 173, 169, 0, 0}, `time:TRICE16_1   message, SysTick is  43437`},
	{[]byte{129, 60, 109, 131, 116, 168, 0, 0}, `time:TRICE32_1   message, SysTick is  43124`},
	{[]byte{130, 60, 109, 131, 57, 167, 0, 0}, `time:TRICE32_1   message, SysTick is  42809`},
	{[]byte{131, 60, 109, 131, 1, 166, 0, 0}, `time:TRICE32_1   message, SysTick is  42497`},
	{[]byte{132, 60, 109, 131, 202, 164, 0, 0}, `time:TRICE32_1   message, SysTick is  42186`},
	{[]byte{133, 172, 254, 135, 255, 128, 127, 1}, `tst:trice8_4  %03x ->  001  07f  -80  -01`},
	{[]byte{134, 196, 251, 135, 255, 128, 127, 1}, `tst:trice8_4   %4d ->    1  127 -128   -1`},
	{[]byte{135, 140, 243, 135, 255, 128, 127, 1}, `tst:trice8_4   %4o ->    1  177 -200   -1`},
	{[]byte{136, 63, 253, 135, 247, 255, 8, 0, 255, 127, 1, 0, 255, 255, 0, 128}, `tst:trice16_4  %05x ->   00001   07fff   -8000   -0001`},
	{[]byte{137, 215, 254, 135, 247, 255, 8, 0, 255, 127, 1, 0, 255, 255, 0, 128}, `tst:trice16_4   %6d ->       1   32767  -32768      -1`},
	{[]byte{138, 87, 252, 135, 247, 255, 8, 0, 255, 127, 1, 0, 255, 255, 0, 128}, `tst:trice16_4   %7o ->       1   77777 -100000      -1`},
	{[]byte{139, 31, 255, 135, 239, 255, 16, 0, 1, 0, 0, 0, 255, 255, 255, 127, 0, 0, 0, 128, 255, 255, 255, 255}, `tst:trice32_4 %09x ->      000000001      07fffffff       -80000000     -00000001`},
	{[]byte{140, 207, 248, 135, 239, 255, 16, 0, 1, 0, 0, 0, 255, 255, 255, 127, 0, 0, 0, 128, 255, 255, 255, 255}, `tst:trice32_4 %10d ->              1     2147483647     -2147483648            -1`},
	{[]byte{141, 31, 247, 135, 247, 255, 8, 0, 68, 51, 34, 17, 136, 119, 102, 85}, `att:trice64_1 0b1000100100010001100110100010001010101011001100111011110001000`},
	{[]byte{142, 164, 254, 135, 255, 128, 127, 1}, `tst:TRICE8_4  %03x ->  001  07f  -80  -01`},
	{[]byte{143, 156, 249, 135, 255, 128, 127, 1}, `tst:TRICE8_4   %4d ->    1  127 -128   -1`},
	{[]byte{144, 124, 242, 135, 255, 128, 127, 1}, `tst:TRICE8_4   %4o ->    1  177 -200   -1`},
	{[]byte{145, 255, 240, 135, 247, 255, 8, 0, 255, 127, 1, 0, 255, 255, 0, 128}, `tst:TRICE16_4  %05x ->   00001   07fff   -8000   -0001`},
	{[]byte{146, 175, 241, 135, 247, 255, 8, 0, 255, 127, 1, 0, 255, 255, 0, 128}, `tst:TRICE16_4   %6d ->       1   32767  -32768      -1`},
	{[]byte{147, 39, 241, 135, 247, 255, 8, 0, 255, 127, 1, 0, 255, 255, 0, 128}, `tst:TRICE16_4   %7o ->       1   77777 -100000      -1`},
	{[]byte{148, 55, 255, 135, 239, 255, 16, 0, 1, 0, 0, 0, 255, 255, 255, 127, 0, 0, 0, 128, 255, 255, 255, 255}, `tst:TRICE32_4 %09x ->      000000001      07fffffff       -80000000     -00000001`},
	{[]byte{149, 87, 241, 135, 239, 255, 16, 0, 1, 0, 0, 0, 255, 255, 255, 127, 0, 0, 0, 128, 255, 255, 255, 255}, `tst:TRICE32_4 %10d ->              1     2147483647     -2147483648            -1`},
	{[]byte{150, 167, 251, 135, 247, 255, 8, 0, 68, 51, 34, 17, 136, 119, 102, 85}, `att:TRICE64_1 0b1000100100010001100110100010001010101011001100111011110001000`},
	{[]byte{151, 124, 227, 255, 7, 0, 0, 2}, `MSG: triceFifoMaxDepth = 512, select = 7`},
	{[]byte{152, 57, 69, 129, 161, 0, 0, 0}, `tst:trice8_1 -5F`},
	{[]byte{153, 50, 194, 128, 162, 161, 0, 0}, `tst:trice8_2 -5F -5E`},
	{[]byte{154, 19, 121, 131, 163, 162, 161, 0}, `tst:trice8_3 -5F -5E -5D`},
	{[]byte{155, 212, 76, 129, 164, 163, 162, 161}, `tst:trice8_4 -5F -5E -5D -5C`},
	{[]byte{156, 159, 233, 135, 250, 255, 5, 0, 164, 163, 162, 161, 165, 0, 0, 0}, `tst:trice8_5 -5F -5E -5D -5C -5B`},
	{[]byte{157, 103, 92, 133, 249, 255, 6, 0, 164, 163, 162, 161, 166, 165, 0, 0}, `tst:trice8_6 -5F -5E -5D -5C -5B -5A`},
	{[]byte{158, 127, 224, 131, 248, 255, 7, 0, 164, 163, 162, 161, 167, 166, 165, 0}, `tst:trice8_7 -5F -5E -5D -5C -5B -5A -59`},
	{[]byte{159, 247, 152, 135, 247, 255, 8, 0, 164, 163, 162, 161, 168, 167, 166, 165}, `tst:trice8_8 -5F -5E -5D -5C -5B -5A -59 -58`},
	{[]byte{160, 113, 94, 134, 161, 0, 0, 0}, `tst:TRICE8_1 -5f`},
	{[]byte{161, 2, 116, 130, 162, 161, 0, 0}, `tst:TRICE8_2 -5f -5e`},
	{[]byte{162, 123, 61, 134, 163, 162, 161, 0}, `tst:TRICE8_3 -5f -5e -5d`},
	{[]byte{163, 132, 129, 135, 164, 163, 162, 161}, `tst:TRICE8_4 -5f -5e -5d -5c`},
	{[]byte{164, 135, 126, 134, 250, 255, 5, 0, 164, 163, 162, 161, 165, 0, 0, 0}, `tst:TRICE8_5 -5f -5e -5d -5c -5b`},
	{[]byte{165, 119, 165, 130, 249, 255, 6, 0, 164, 163, 162, 161, 166, 165, 0, 0}, `tst:TRICE8_6 -5f -5e -5d -5c -5b -5a`},
	{[]byte{166, 39, 185, 130, 248, 255, 7, 0, 164, 163, 162, 161, 167, 166, 165, 0}, `tst:TRICE8_7 -5f -5e -5d -5c -5b -5a -59`},
	{[]byte{167, 167, 253, 135, 247, 255, 8, 0, 164, 163, 162, 161, 168, 167, 166, 165}, `tst:TRICE8_8 -5f -5e -5d -5c -5b -5a -59 -58`},
	{[]byte{168, 124, 227, 255, 8, 0, 0, 2}, `MSG: triceFifoMaxDepth = 512, select = 8`},
	{[]byte{169, 193, 242, 135, 145, 0, 0, 0}, `tst:trice8_1 -111`},
	{[]byte{170, 18, 253, 135, 134, 145, 0, 0}, `tst:trice8_2 -111 -122`},
	{[]byte{171, 219, 242, 135, 253, 134, 145, 0}, `tst:trice8_3 -111 -122 -3`},
	{[]byte{172, 60, 244, 135, 252, 253, 134, 145}, `tst:trice8_4 -111 -122 -3 -4`},
	{[]byte{173, 255, 254, 135, 250, 255, 5, 0, 252, 253, 134, 145, 251, 0, 0, 0}, `tst:trice8_5 -111 -122 -3 -4 -5`},
	{[]byte{174, 191, 254, 135, 249, 255, 6, 0, 252, 253, 134, 145, 250, 251, 0, 0}, `tst:trice8_6 -111 -122 -3 -4 -5 -6`},
	{[]byte{175, 63, 240, 135, 248, 255, 7, 0, 252, 253, 134, 145, 249, 250, 251, 0}, `tst:trice8_7 -111 -122 -3 -4 -5 -6 -7`},
	{[]byte{176, 159, 255, 135, 247, 255, 8, 0, 252, 253, 134, 145, 248, 249, 250, 251}, `tst:trice8_8 -111 -122 -3 -4 -5 -6 -7 -8`},
	{[]byte{177, 9, 252, 135, 145, 0, 0, 0}, `tst:TRICE8_1 -111`},
	{[]byte{178, 226, 248, 135, 34, 145, 0, 0}, `tst:TRICE8_2 -111 34`},
	{[]byte{179, 115, 253, 135, 253, 34, 145, 0}, `tst:TRICE8_3 -111 34 -3`},
	{[]byte{180, 172, 239, 135, 252, 253, 34, 145}, `tst:TRICE8_4 -111 34 -3 -4`},
	{[]byte{181, 191, 246, 135, 250, 255, 5, 0, 252, 253, 34, 145, 251, 0, 0, 0}, `tst:TRICE8_5 -111 34 -3 -4 -5`},
	{[]byte{182, 231, 250, 135, 249, 255, 6, 0, 252, 253, 34, 145, 250, 251, 0, 0}, `tst:TRICE8_6 -111 34 -3 -4 -5 -6`},
	{[]byte{183, 247, 246, 135, 248, 255, 7, 0, 252, 253, 34, 145, 249, 250, 251, 0}, `tst:TRICE8_7 -111 34 -3 -4 -5 -6 -7`},
	{[]byte{184, 135, 247, 135, 247, 255, 8, 0, 252, 253, 34, 145, 248, 249, 250, 251}, `tst:TRICE8_8 -111 34 -3 -4 -5 -6 -7 -8`},
	{[]byte{185, 124, 227, 255, 9, 0, 0, 2}, `MSG: triceFifoMaxDepth = 512, select = 9`},
	{[]byte{186, 130, 252, 135, 145, 255, 0, 0}, `tst:trice16_1 -111`},
	{[]byte{187, 12, 242, 135, 34, 255, 145, 255}, `tst:trice16_2 -111 -222`},
	{[]byte{188, 239, 252, 135, 249, 255, 6, 0, 34, 255, 145, 255, 179, 254, 0, 0}, `tst:trice16_3 -111 -222 -333`},
	{[]byte{189, 199, 243, 135, 247, 255, 8, 0, 34, 255, 145, 255, 68, 254, 179, 254}, `tst:trice16_4 -111 -222 -333 -444`},
	{[]byte{190, 66, 252, 135, 145, 255, 0, 0}, `tst:TRICE16_1 -111`},
	{[]byte{191, 36, 252, 135, 34, 255, 145, 255}, `tst:TRICE16_2 -111 -222`},
	{[]byte{192, 207, 239, 135, 249, 255, 6, 0, 34, 255, 145, 255, 179, 254, 0, 0}, `tst:TRICE16_3 -111 -222 -333`},
	{[]byte{193, 239, 242, 135, 247, 255, 8, 0, 34, 255, 145, 255, 68, 254, 179, 254}, `tst:TRICE16_4 -111 -222 -333 -444`},
	{[]byte{194, 164, 248, 135, 145, 255, 255, 255}, `tst:trice32_1 -111`},
	{[]byte{195, 111, 254, 135, 247, 255, 8, 0, 145, 255, 255, 255, 34, 255, 255, 255}, `tst:trice32_2 -111 -222`},
	{[]byte{196, 239, 255, 135, 243, 255, 12, 0, 145, 255, 255, 255, 34, 255, 255, 255, 179, 254, 255, 255}, `tst:trice32_3 -111 -222 -333`},
	{[]byte{197, 207, 250, 135, 239, 255, 16, 0, 145, 255, 255, 255, 34, 255, 255, 255, 179, 254, 255, 255, 68, 254, 255, 255}, `tst:trice32_4 -111 -222 -333 -444`},
	{[]byte{198, 52, 242, 135, 254, 202, 35, 1}, `tst:trice32_1 0123cafe`},
	{[]byte{199, 175, 255, 135, 247, 255, 8, 0, 254, 202, 237, 254, 35, 1, 254, 202}, `tst:trice32_2 -1123502 -3501fedd`},
	{[]byte{200, 167, 252, 135, 243, 255, 12, 0, 34, 17, 0, 170, 51, 34, 17, 187, 68, 51, 34, 204}, `tst:trice32_3 -55ffeede -44eeddcd -33ddccbc`},
	{[]byte{201, 191, 243, 135, 239, 255, 16, 0, 120, 86, 52, 18, 240, 222, 188, 154, 152, 186, 220, 254, 33, 67, 101, 135}, `tst:trice32_4 12345678 -65432110 -1234568 -789abcdf`},
	{[]byte{202, 196, 240, 135, 254, 202, 35, 1}, `tst:TRICE32_1 0123cafe`},
	{[]byte{203, 204, 255, 135, 145, 255, 255, 255}, `tst:TRICE32_1 -111`},
	{[]byte{204, 55, 249, 135, 247, 255, 8, 0, 145, 255, 255, 255, 34, 255, 255, 255}, `tst:TRICE32_2 -6f -de`},
	{[]byte{205, 239, 239, 135, 247, 255, 8, 0, 145, 255, 255, 255, 34, 255, 255, 255}, `tst:TRICE32_2 -111 -222`},
	{[]byte{206, 143, 241, 135, 243, 255, 12, 0, 145, 255, 255, 255, 34, 255, 255, 255, 179, 254, 255, 255}, `tst:TRICE32_3 -6f -de -14d`},
	{[]byte{207, 103, 243, 135, 243, 255, 12, 0, 145, 255, 255, 255, 34, 255, 255, 255, 179, 254, 255, 255}, `tst:TRICE32_3 -111 -222 -333`},
	{[]byte{208, 31, 248, 135, 239, 255, 16, 0, 145, 255, 255, 255, 34, 255, 255, 255, 179, 254, 255, 255, 68, 254, 255, 255}, `tst:TRICE32_4 -6f -de -14d -1bc`},
	{[]byte{209, 87, 253, 135, 239, 255, 16, 0, 145, 255, 255, 255, 34, 255, 255, 255, 179, 254, 255, 255, 68, 254, 255, 255}, `tst:TRICE32_4 -111 -222 -333 -444`},
	{[]byte{210, 159, 248, 135, 247, 255, 8, 0, 255, 255, 255, 255, 145, 255, 255, 255}, `tst:trice64_1 -111`},
	{[]byte{211, 247, 251, 135, 239, 255, 16, 0, 255, 255, 255, 255, 145, 255, 255, 255, 255, 255, 255, 255, 34, 255, 255, 255}, `tst:trice64_2 -111 -222`},
	{[]byte{212, 95, 239, 135, 247, 255, 8, 0, 33, 67, 101, 135, 120, 86, 52, 18}, `tst:trice64_1 -789abcdeedcba988`},
	{[]byte{213, 119, 247, 135, 239, 255, 16, 0, 223, 155, 87, 19, 49, 117, 185, 253, 32, 100, 168, 236, 206, 138, 70, 2}, `tst:trice64_2 13579bdffdb97531 -13579bdffdb97532`},
	{[]byte{214, 199, 255, 135, 247, 255, 8, 0, 255, 255, 255, 255, 145, 255, 255, 255}, `tst:TRICE64_1 -111`},
	{[]byte{215, 127, 251, 135, 239, 255, 16, 0, 255, 255, 255, 255, 145, 255, 255, 255, 255, 255, 255, 255, 34, 255, 255, 255}, `tst:TRICE64_2 -111 -222`},
	{[]byte{216, 124, 227, 255, 10, 0, 0, 2}, `MSG: triceFifoMaxDepth = 512, select = 10`},
	{[]byte{217, 200, 120, 132, 218, 72, 91, 132, 219, 144, 42, 132, 220, 240, 172, 133, 221, 64, 64, 134}, `e:Aw:Ba:cwr:drd:e`},
	{[]byte{222, 248, 94, 134, 223, 80, 191, 135, 224, 216, 57, 134, 225, 216, 112, 132, 226, 104, 156, 132, 227, 48, 245, 134}, `diag:fd:Gt:Htime:imessage:Jdbg:k`},
	{[]byte{228, 0, 245, 135, 229, 144, 240, 135, 230, 120, 244, 135, 231, 24, 253, 135, 232, 184, 250, 135}, `e:Aw:Ba:cwr:drd:e`},
	{[]byte{233, 16, 242, 135, 234, 136, 245, 135, 235, 104, 255, 135, 236, 136, 240, 135, 237, 0, 250, 135, 238, 16, 249, 135}, `diag:fd:Gt:Htime:imessage:Jdbg:k`},
	{[]byte{239, 124, 227, 255, 11, 0, 0, 2}, `MSG: triceFifoMaxDepth = 512, select = 11`},
	{[]byte{240, 120, 69, 134, 241, 72, 181, 132, 242, 16, 47, 132, 243, 152, 253, 135, 244, 232, 163, 132, 245, 104, 155, 135, 246, 216, 84, 133}, `1234e:7m:12m:123`},
	{[]byte{247, 96, 246, 135, 248, 72, 244, 135, 249, 168, 242, 135, 250, 24, 246, 135, 251, 176, 240, 135, 252, 104, 239, 135, 253, 72, 251, 135}, `1234e:7m:12m:123`},
	{[]byte{254, 124, 227, 255, 12, 0, 0, 2}, `MSG: triceFifoMaxDepth = 512, select = 12`},
	{[]byte{255, 193, 242, 135, 1, 0, 0, 0}, `tst:trice8_1 1`},
	{[]byte{0, 18, 253, 135, 2, 1, 0, 0}, `tst:trice8_2 1 2`},
	{[]byte{1, 219, 242, 135, 3, 2, 1, 0}, `tst:trice8_3 1 2 3`},
	{[]byte{2, 60, 244, 135, 4, 3, 2, 1}, `tst:trice8_4 1 2 3 4`},
	{[]byte{3, 255, 254, 135, 250, 255, 5, 0, 4, 3, 2, 1, 5, 0, 0, 0}, `tst:trice8_5 1 2 3 4 5`},
	{[]byte{4, 191, 254, 135, 249, 255, 6, 0, 4, 3, 2, 1, 6, 5, 0, 0}, `tst:trice8_6 1 2 3 4 5 6`},
	{[]byte{5, 63, 240, 135, 248, 255, 7, 0, 4, 3, 2, 1, 7, 6, 5, 0}, `tst:trice8_7 1 2 3 4 5 6 7`},
	{[]byte{6, 159, 255, 135, 247, 255, 8, 0, 4, 3, 2, 1, 8, 7, 6, 5}, `tst:trice8_8 1 2 3 4 5 6 7 8`},
	{[]byte{7, 9, 252, 135, 1, 0, 0, 0}, `tst:TRICE8_1 1`},
	{[]byte{8, 226, 248, 135, 2, 1, 0, 0}, `tst:TRICE8_2 1 2`},
	{[]byte{9, 115, 253, 135, 3, 2, 1, 0}, `tst:TRICE8_3 1 2 3`},
	{[]byte{10, 172, 239, 135, 4, 3, 2, 1}, `tst:TRICE8_4 1 2 3 4`},
	{[]byte{11, 191, 246, 135, 250, 255, 5, 0, 4, 3, 2, 1, 5, 0, 0, 0}, `tst:TRICE8_5 1 2 3 4 5`},
	{[]byte{12, 231, 250, 135, 249, 255, 6, 0, 4, 3, 2, 1, 6, 5, 0, 0}, `tst:TRICE8_6 1 2 3 4 5 6`},
	{[]byte{13, 247, 246, 135, 248, 255, 7, 0, 4, 3, 2, 1, 7, 6, 5, 0}, `tst:TRICE8_7 1 2 3 4 5 6 7`},
	{[]byte{14, 135, 247, 135, 247, 255, 8, 0, 4, 3, 2, 1, 8, 7, 6, 5}, `tst:TRICE8_8 1 2 3 4 5 6 7 8`},
	{[]byte{15, 124, 227, 255, 13, 0, 0, 2}, `MSG: triceFifoMaxDepth = 512, select = 13`},
	{[]byte{16, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 17, 231, 253, 135, 247, 255, 8, 0, 115, 95, 101, 108, 110, 105, 114, 116, 18, 250, 247, 135, 10, 103, 0, 0}, `an_example_string`},
	{[]byte{19, 137, 249, 135, 10, 0, 0, 0}, ``},
	{[]byte{20, 250, 247, 135, 10, 97, 0, 0}, `a`},
	{[]byte{21, 11, 241, 135, 10, 110, 97, 0}, `an`},
	{[]byte{22, 228, 240, 135, 10, 95, 110, 97}, `an_`},
	{[]byte{23, 7, 242, 135, 250, 255, 5, 0, 101, 95, 110, 97, 10, 0, 0, 0}, `an_e`},
	{[]byte{24, 15, 254, 135, 249, 255, 6, 0, 101, 95, 110, 97, 10, 120, 0, 0}, `an_ex`},
	{[]byte{25, 15, 243, 135, 248, 255, 7, 0, 101, 95, 110, 97, 10, 97, 120, 0}, `an_exa`},
	{[]byte{26, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 10, 109, 97, 120}, `an_exam`},
	{[]byte{27, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 28, 137, 249, 135, 10, 0, 0, 0}, `an_examp`},
	{[]byte{29, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 30, 250, 247, 135, 10, 108, 0, 0}, `an_exampl`},
	{[]byte{31, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 32, 11, 241, 135, 10, 101, 108, 0}, `an_example`},
	{[]byte{33, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 34, 228, 240, 135, 10, 95, 101, 108}, `an_example_`},
	{[]byte{35, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 36, 7, 242, 135, 250, 255, 5, 0, 115, 95, 101, 108, 10, 0, 0, 0}, `an_example_s`},
	{[]byte{37, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 38, 15, 254, 135, 249, 255, 6, 0, 115, 95, 101, 108, 10, 116, 0, 0}, `an_example_st`},
	{[]byte{39, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 40, 15, 243, 135, 248, 255, 7, 0, 115, 95, 101, 108, 10, 114, 116, 0}, `an_example_str`},
	{[]byte{41, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 42, 231, 253, 135, 247, 255, 8, 0, 115, 95, 101, 108, 10, 105, 114, 116}, `an_example_stri`},
	{[]byte{43, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 44, 231, 253, 135, 247, 255, 8, 0, 115, 95, 101, 108, 110, 105, 114, 116, 45, 137, 249, 135, 10, 0, 0, 0}, `an_example_strin`},
	{[]byte{46, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 47, 231, 253, 135, 247, 255, 8, 0, 115, 95, 101, 108, 110, 105, 114, 116, 48, 250, 247, 135, 10, 103, 0, 0}, `an_example_string`},
	{[]byte{49, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 50, 231, 253, 135, 247, 255, 8, 0, 115, 95, 101, 108, 110, 105, 114, 116, 51, 250, 247, 135, 10, 103, 0, 0}, `an_example_string`},
	{[]byte{52, 137, 249, 135, 10, 0, 0, 0}, ``},
	{[]byte{53, 250, 247, 135, 10, 97, 0, 0}, `a`},
	{[]byte{54, 11, 241, 135, 10, 110, 97, 0}, `an`},
	{[]byte{55, 228, 240, 135, 10, 95, 110, 97}, `an_`},
	{[]byte{56, 7, 242, 135, 250, 255, 5, 0, 101, 95, 110, 97, 10, 0, 0, 0}, `an_e`},
	{[]byte{57, 15, 254, 135, 249, 255, 6, 0, 101, 95, 110, 97, 10, 120, 0, 0}, `an_ex`},
	{[]byte{58, 15, 243, 135, 248, 255, 7, 0, 101, 95, 110, 97, 10, 97, 120, 0}, `an_exa`},
	{[]byte{59, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 10, 109, 97, 120}, `an_exam`},
	{[]byte{60, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 61, 137, 249, 135, 10, 0, 0, 0}, `an_examp`},
	{[]byte{62, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 63, 250, 247, 135, 10, 108, 0, 0}, `an_exampl`},
	{[]byte{64, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 65, 11, 241, 135, 10, 101, 108, 0}, `an_example`},
	{[]byte{66, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 67, 228, 240, 135, 10, 95, 101, 108}, `an_example_`},
	{[]byte{68, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 69, 7, 242, 135, 250, 255, 5, 0, 115, 95, 101, 108, 10, 0, 0, 0}, `an_example_s`},
	{[]byte{70, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 71, 15, 254, 135, 249, 255, 6, 0, 115, 95, 101, 108, 10, 116, 0, 0}, `an_example_st`},
	{[]byte{72, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 73, 15, 243, 135, 248, 255, 7, 0, 115, 95, 101, 108, 10, 114, 116, 0}, `an_example_str`},
	{[]byte{74, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 75, 231, 253, 135, 247, 255, 8, 0, 115, 95, 101, 108, 10, 105, 114, 116}, `an_example_stri`},
	{[]byte{76, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 77, 231, 253, 135, 247, 255, 8, 0, 115, 95, 101, 108, 110, 105, 114, 116, 78, 137, 249, 135, 10, 0, 0, 0}, `an_example_strin`},
	{[]byte{79, 231, 253, 135, 247, 255, 8, 0, 101, 95, 110, 97, 112, 109, 97, 120, 80, 231, 253, 135, 247, 255, 8, 0, 115, 95, 101, 108, 110, 105, 114, 116, 81, 250, 247, 135, 10, 103, 0, 0}, `an_example_string`},
	{[]byte{82, 124, 227, 255, 14, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 14`},
	{[]byte{83, 232, 245, 135}, ``},
	{[]byte{84, 233, 245, 135, 32, 0, 0, 0}, ` `},
	{[]byte{85, 234, 245, 135, 32, 33, 0, 0}, ` !`},
	{[]byte{86, 235, 245, 135, 32, 33, 34, 0}, ` !"`},
	{[]byte{87, 236, 245, 135, 32, 33, 34, 35}, ` !"#`},
	{[]byte{88, 239, 245, 135, 250, 255, 5, 0, 32, 33, 34, 35, 36, 0, 0, 0}, ` !"#$`},
	{[]byte{89, 239, 245, 135, 249, 255, 6, 0, 32, 33, 34, 35, 36, 37, 0, 0}, ` !"#$%`},
	{[]byte{90, 239, 245, 135, 248, 255, 7, 0, 32, 33, 34, 35, 36, 37, 38, 0}, ` !"#$%&`},
	{[]byte{91, 239, 245, 135, 247, 255, 8, 0, 32, 33, 34, 35, 36, 37, 38, 39}, ` !"#$%&'`},
	{[]byte{92, 239, 245, 135, 246, 255, 9, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0, 0, 0}, ` !"#$%&'(`},
	{[]byte{93, 239, 245, 135, 245, 255, 10, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 0, 0}, ` !"#$%&'()`},
	{[]byte{94, 239, 245, 135, 244, 255, 11, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0}, ` !"#$%&'()*`},
	{[]byte{95, 239, 245, 135, 243, 255, 12, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43}, ` !"#$%&'()*+`},
	{[]byte{96, 239, 245, 135, 242, 255, 13, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0, 0, 0}, ` !"#$%&'()*+,`},
	{[]byte{97, 239, 245, 135, 241, 255, 14, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0, 0}, ` !"#$%&'()*+,-`},
	{[]byte{98, 239, 245, 135, 240, 255, 15, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0}, ` !"#$%&'()*+,-.`},
	{[]byte{99, 239, 245, 135, 239, 255, 16, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47}, ` !"#$%&'()*+,-./`},
	{[]byte{100, 239, 245, 135, 238, 255, 17, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0, 0, 0}, ` !"#$%&'()*+,-./0`},
	{[]byte{101, 239, 245, 135, 237, 255, 18, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0, 0}, ` !"#$%&'()*+,-./01`},
	{[]byte{102, 239, 245, 135, 236, 255, 19, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0}, ` !"#$%&'()*+,-./012`},
	{[]byte{103, 124, 227, 255, 15, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 15`},
	{[]byte{104, 239, 245, 135, 225, 255, 30, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0}, ` !"#$%&'()*+,-./0123456789:;<=`},
	{[]byte{105, 239, 245, 135, 224, 255, 31, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0}, ` !"#$%&'()*+,-./0123456789:;<=>`},
	{[]byte{106, 239, 245, 135, 223, 255, 32, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63}, ` !"#$%&'()*+,-./0123456789:;<=>?`},
	{[]byte{107, 239, 245, 135, 222, 255, 33, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0, 0, 0}, ` !"#$%&'()*+,-./0123456789:;<=>?@`},
	{[]byte{108, 239, 245, 135, 221, 255, 34, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 0, 0}, ` !"#$%&'()*+,-./0123456789:;<=>?@A`},
	{[]byte{109, 124, 227, 255, 16, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 16`},
	{[]byte{110, 239, 245, 135, 129, 255, 126, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0}, ` !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_ abcdefghijklmnopqrstuvwxyz{|}~  !"#$%&'()*+,-./0123456789:;<=`},
	{[]byte{111, 239, 245, 135, 128, 255, 127, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0}, ` !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_ abcdefghijklmnopqrstuvwxyz{|}~  !"#$%&'()*+,-./0123456789:;<=>`},
	{[]byte{112, 239, 245, 135, 127, 255, 128, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63}, ` !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_ abcdefghijklmnopqrstuvwxyz{|}~  !"#$%&'()*+,-./0123456789:;<=>?`},
	{[]byte{113, 239, 245, 135, 126, 255, 129, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 32, 0, 0, 0}, ` !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_ abcdefghijklmnopqrstuvwxyz{|}~  !"#$%&'()*+,-./0123456789:;<=>? `},
	{[]byte{114, 124, 227, 255, 17, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 17`},
	{[]byte{115, 239, 245, 135, 1, 255, 254, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0}, ` !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_ abcdefghijklmnopqrstuvwxyz{|}~  !"#$%&'()*+,-./0123456789:;<=>? !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_ abcdefghijklmnopqrstuvwxyz{|}~  !"#$%&'()*+,-./0123456789:;<=`},
	{[]byte{116, 239, 245, 135, 0, 255, 255, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0}, ` !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_ abcdefghijklmnopqrstuvwxyz{|}~  !"#$%&'()*+,-./0123456789:;<=>? !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_ abcdefghijklmnopqrstuvwxyz{|}~  !"#$%&'()*+,-./0123456789:;<=>`},
	{[]byte{117, 124, 227, 255, 18, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 18`},
	{[]byte{118, 239, 245, 135, 254, 254, 1, 1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 32, 0, 0, 0}, ` !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_ abcdefghijklmnopqrstuvwxyz{|}~  !"#$%&'()*+,-./0123456789:;<=>? !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_ abcdefghijklmnopqrstuvwxyz{|}~  !"#$%&'()*+,-./0123456789:;<=>? `},
	{[]byte{119, 239, 245, 135, 253, 254, 2, 1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 32, 33, 0, 0}, ` !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_ abcdefghijklmnopqrstuvwxyz{|}~  !"#$%&'()*+,-./0123456789:;<=>? !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_ abcdefghijklmnopqrstuvwxyz{|}~  !"#$%&'()*+,-./0123456789:;<=>? !`},
	{[]byte{120, 124, 227, 255, 19, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 19`},
	{[]byte{121, 124, 227, 255, 20, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 20`},
	{[]byte{122, 31, 18, 128, 247, 255, 8, 0, 129, 129, 129, 129, 129, 129, 129, 129}, `tst:TRICE8_1 %d=-127, %u=129, 0x%x=0x-7f, 0x%2x=0x-7f, 0x%02x=0x-7f, 0x%3x=0x-7f, 0x%03x=0x-7f, %b=-1111111`},
	{[]byte{123, 146, 156, 130, 160, 0, 0, 0}, `tst:TRICE16_1 0x00a0`},
	{[]byte{124, 137, 150, 130, 160, 0, 0, 0}, `tst:TRICE8_1 0x-60`},
	{[]byte{125, 137, 150, 130, 160, 0, 0, 0}, `tst:TRICE8_1 0x-60`},
	{[]byte{126, 49, 255, 131, 201, 0, 0, 0}, `tst:TRICE8_1 201`},
	{[]byte{127, 138, 233, 128, 202, 201, 0, 0}, `tst:TRICE8_2 201 202`},
	{[]byte{128, 243, 181, 129, 203, 202, 201, 0}, `tst:TRICE8_3 201 202 203`},
	{[]byte{129, 132, 212, 131, 204, 203, 202, 201}, `tst:TRICE8_4 201 202 203 204`},
	{[]byte{130, 39, 20, 133, 250, 255, 5, 0, 204, 203, 202, 201, 205, 0, 0, 0}, `tst:TRICE8_5 201 202 203 204 205`},
	{[]byte{131, 63, 1, 131, 249, 255, 6, 0, 204, 203, 202, 201, 206, 205, 0, 0}, `tst:TRICE8_6 201 202 203 204 205 206`},
	{[]byte{132, 143, 204, 134, 248, 255, 7, 0, 204, 203, 202, 201, 207, 206, 205, 0}, `tst:TRICE8_7 201 202 203 204 205 206 207`},
	{[]byte{133, 31, 118, 132, 247, 255, 8, 0, 204, 203, 202, 201, 208, 207, 206, 205}, `tst:TRICE8_8 201 202 203 204 205 206 207 208`},
	{[]byte{134, 10, 253, 132, 97, 234, 0, 0}, `tst:TRICE16_1 60001`},
	{[]byte{135, 252, 188, 131, 98, 234, 97, 234}, `tst:TRICE16_2 60001 60002`},
	{[]byte{136, 255, 105, 135, 249, 255, 6, 0, 98, 234, 97, 234, 99, 234, 0, 0}, `tst:TRICE16_3 60001 60002 60003`},
	{[]byte{137, 247, 133, 129, 247, 255, 8, 0, 98, 234, 97, 234, 100, 234, 99, 234}, `tst:TRICE16_4 60001 60002 60003 60004`},
	{[]byte{138, 92, 246, 130, 1, 40, 107, 238}, `tst:TRICE32_1 4000000001`},
	{[]byte{139, 55, 170, 132, 247, 255, 8, 0, 1, 40, 107, 238, 2, 40, 107, 238}, `tst:TRICE32_2 4000000001 4000000002`},
	{[]byte{140, 239, 58, 135, 243, 255, 12, 0, 1, 40, 107, 238, 2, 40, 107, 238, 3, 40, 107, 238}, `tst:TRICE32_3 4000000001 4000000002 4000000003`},
	{[]byte{141, 199, 168, 132, 239, 255, 16, 0, 1, 40, 107, 238, 2, 40, 107, 238, 3, 40, 107, 238, 4, 40, 107, 238}, `tst:TRICE32_4 4000000001 4000000002 4000000003 4000000004`},
	{[]byte{142, 23, 134, 133, 247, 255, 8, 0, 255, 255, 255, 255, 255, 255, 255, 255}, `tst:TRICE64_1 18446744073709551615`},
	{[]byte{143, 159, 120, 129, 239, 255, 16, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255}, `tst:TRICE64_2 18446744073709551615 18446744073709551614`},
	{[]byte{144, 124, 227, 255, 21, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 21`},
	{[]byte{0, 0, 11, 105}, `wr: Trice0    short`},
	{[]byte{232, 253, 208, 52}, `rd: Trice16_1 65000`},
	{[]byte{205, 171, 17, 101}, `diag: Trice8_2  0x-55, 0x-33`},
	{[]byte{41, 183, 182, 120}, `time: Trice16_1  46889`},
	{[]byte{136, 182, 182, 120}, `time: Trice16_1  46728`},
	{[]byte{231, 181, 182, 120}, `time: Trice16_1  46567`},
	{[]byte{70, 181, 182, 120}, `time: Trice16_1  46406`},
	{[]byte{232, 253, 208, 52}, `rd: Trice16_1 65000`},
	{[]byte{5, 180, 182, 120}, `time: Trice16_1  46085`},
	{[]byte{232, 253, 208, 52}, `rd: Trice16_1 65000`},
	{[]byte{196, 178, 182, 120}, `time: Trice16_1  45764`},
	{[]byte{0, 0, 57, 74}, `wr: Trice0i   short`},
	{[]byte{232, 253, 46, 22}, `rd: Trice16_1i -536`},
	{[]byte{205, 171, 148, 17}, `diag: Trice8_2  0x-55, 0x-33`},
	{[]byte{139, 176, 125, 89}, `time: Trice16_1i  45195`},
	{[]byte{253, 175, 125, 89}, `time: Trice16_1i  45053`},
	{[]byte{110, 175, 125, 89}, `time: Trice16_1i  44910`},
	{[]byte{224, 174, 125, 89}, `time: Trice16_1i  44768`},
	{[]byte{232, 253, 239, 52}, `rd: Trice16_1i 65000`},
	{[]byte{196, 173, 125, 89}, `time: Trice16_1i  44484`},
	{[]byte{232, 253, 239, 52}, `rd: Trice16_1i 65000`},
	{[]byte{163, 172, 125, 89}, `time: Trice16_1i  44195`},
	{[]byte{145, 124, 227, 255, 22, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 22`},
	{[]byte{0, 0, 20, 60}, `msg: Trice0i    -> short  trice macro    (no   cycle counter) for only inside critical section`},
	{[]byte{146, 160, 207, 132}, `msg: TRICE0i    -> normal trice macro    (with cycle counter) for only inside critical section`},
	{[]byte{147, 96, 60, 134}, `msg: trice0i    -> normal trice function (with cycle counter) for only inside critical section`},
	{[]byte{148, 192, 249, 135}, `msg: TRICE0     -> normal trice macro    (with cycle counter) for everywhere`},
	{[]byte{0, 0, 202, 90}, `msg: Trice0     -> short  trice macro    (no   cycle counter) for everywhere`},
	{[]byte{149, 200, 36, 134}, `msg: trice0     -> normal trice function (with cycle counter) for everywhere`},
	{[]byte{150, 124, 227, 255, 23, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 23`},
	{[]byte{111, 0, 201, 104}, `msg:  Trice8_1i -> short  trice macro    (no   cycle counter) for only inside critical section 111`},
	{[]byte{151, 129, 40, 134, 111, 0, 0, 0}, `msg:  trice8_1i -> normal trice function (with cycle counter) for only inside critical section 111`},
	{[]byte{152, 169, 59, 135, 111, 0, 0, 0}, `msg:  TRICE8_1i -> normal trice macro    (with cycle counter) for only inside critical section 111`},
	{[]byte{111, 0, 81, 126}, `msg: Trice16_1i -> short  trice macro    (no   cycle counter) for only inside critical section 111`},
	{[]byte{153, 90, 9, 132, 111, 0, 0, 0}, `msg: TRICE16_1i -> normal trice macro    (with cycle counter) for only inside critical section 111`},
	{[]byte{154, 58, 100, 135, 111, 0, 0, 0}, `msg: trice16_1i -> normal trice function (with cycle counter) for only inside critical section 111`},
	{[]byte{155, 84, 78, 134, 111, 0, 0, 0}, `msg: TRICE32_1i -> normal trice macro    (with cycle counter) for only inside critical section 111`},
	{[]byte{156, 92, 70, 135, 111, 0, 0, 0}, `msg: trice32_1i -> normal trice function (with cycle counter) for only inside critical section 111`},
	{[]byte{157, 215, 179, 135, 247, 255, 8, 0, 0, 0, 0, 0, 111, 0, 0, 0}, `msg: TRICE64_1i -> normal trice macro    (with cycle counter) for only inside critical section 111`},
	{[]byte{158, 223, 207, 132, 247, 255, 8, 0, 0, 0, 0, 0, 111, 0, 0, 0}, `msg: trice64_1i -> normal trice function (with cycle counter) for only inside critical section 111`},
	{[]byte{222, 0, 12, 37}, `msg:  Trice8_1  -> short  trice macro    (no   cycle counter) for everywhere                   222`},
	{[]byte{159, 1, 55, 133, 222, 0, 0, 0}, `msg:  TRICE8_1  -> normal trice macro    (with cycle counter) for everywhere                   222`},
	{[]byte{160, 41, 99, 132, 222, 0, 0, 0}, `msg:  trice8_1  -> normal trice function (with cycle counter) for everywhere                   222`},
	{[]byte{222, 0, 153, 9}, `msg: Trice16_1  -> short  trice macro    (no   cycle counter) for everywhere                   222`},
	{[]byte{161, 162, 222, 132, 222, 0, 0, 0}, `msg: TRICE16_1  -> normal trice macro    (with cycle counter) for everywhere                   222`},
	{[]byte{162, 170, 189, 132, 222, 0, 0, 0}, `msg: trice16_1  -> normal trice function (with cycle counter) for everywhere                   222`},
	{[]byte{163, 4, 125, 133, 222, 0, 0, 0}, `msg: TRICE32_1  -> normal trice macro    (with cycle counter) for everywhere                   222`},
	{[]byte{164, 220, 77, 133, 222, 0, 0, 0}, `msg: trice32_1  -> normal trice function (with cycle counter) for everywhere                   222`},
	{[]byte{165, 15, 188, 135, 247, 255, 8, 0, 0, 0, 0, 0, 222, 0, 0, 0}, `msg: TRICE64_1  -> normal trice macro    (with cycle counter) for everywhere                   222`},
	{[]byte{166, 255, 221, 135, 247, 255, 8, 0, 0, 0, 0, 0, 222, 0, 0, 0}, `msg: trice64_1  -> normal trice function (with cycle counter) for everywhere                   222`},
	{[]byte{167, 124, 227, 255, 24, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 24`},
	{[]byte{168, 250, 153, 134, 42, 26, 0, 0}, `msg:  TRICE8_2i -> normal trice macro    (with cycle counter) for only inside critical section 1a 2A`},
	{[]byte{169, 98, 214, 133, 42, 26, 0, 0}, `msg:  trice8_2i -> normal trice function (with cycle counter) for only inside critical section 1a 2A`},
	{[]byte{170, 28, 161, 135, 42, 0, 26, 0}, `msg: TRICE16_2i -> normal trice macro    (with cycle counter) for only inside critical section 1a 2A`},
	{[]byte{171, 44, 90, 135, 52, 18, 52, 18}, `msg: trice16_2i -> normal trice function (with cycle counter) for only inside critical section 1234 1234`},
	{[]byte{172, 143, 87, 135, 247, 255, 8, 0, 52, 18, 0, 0, 52, 18, 0, 0}, `msg: TRICE32_2i -> normal trice macro    (with cycle counter) for only inside critical section 1234 1234`},
	{[]byte{173, 39, 207, 134, 247, 255, 8, 0, 68, 51, 34, 17, 136, 119, 102, 85}, `msg: trice32_2i -> normal trice function (with cycle counter) for only inside critical section 11223344 55667788`},
	{[]byte{174, 159, 18, 135, 239, 255, 16, 0, 68, 51, 34, 17, 136, 119, 102, 85, 187, 204, 221, 238, 120, 136, 153, 170}, `msg: TRICE64_2i -> normal trice macro    (with cycle counter) for only inside critical section 1122334455667788 -1122334455667788`},
	{[]byte{175, 175, 27, 133, 239, 255, 16, 0, 68, 51, 34, 17, 136, 119, 102, 85, 187, 204, 221, 238, 120, 136, 153, 170}, `msg: trice64_2i -> normal trice function (with cycle counter) for only inside critical section 1122334455667788 -1122334455667788`},
	{[]byte{176, 106, 76, 132, 42, 26, 0, 0}, `msg:  TRICE8_2  -> normal trice macro    (with cycle counter) for everywhere                   1a 2A`},
	{[]byte{177, 242, 132, 133, 42, 26, 0, 0}, `msg:  trice8_2  -> normal trice function (with cycle counter) for everywhere                   1a 2A`},
	{[]byte{178, 44, 50, 134, 52, 18, 52, 18}, `msg: TRICE16_2  -> normal trice macro    (with cycle counter) for everywhere                   1234 1234`},
	{[]byte{179, 36, 137, 133, 52, 18, 52, 18}, `msg: trice16_2  -> normal trice function (with cycle counter) for everywhere                   1234 1234`},
	{[]byte{180, 87, 205, 133, 247, 255, 8, 0, 68, 51, 34, 17, 136, 119, 102, 85}, `msg: TRICE32_2  -> normal trice macro    (with cycle counter) for everywhere                   11223344 55667788`},
	{[]byte{181, 119, 227, 135, 247, 255, 8, 0, 68, 51, 34, 17, 136, 119, 102, 85}, `msg: trice32_2  -> normal trice function (with cycle counter) for everywhere                   11223344 55667788`},
	{[]byte{182, 135, 186, 132, 239, 255, 16, 0, 68, 51, 34, 17, 136, 119, 102, 85, 187, 204, 221, 238, 120, 136, 153, 170}, `msg: TRICE64_2  -> normal trice macro    (with cycle counter) for everywhere                   1122334455667788 -1122334455667788`},
	{[]byte{183, 231, 70, 132, 239, 255, 16, 0, 68, 51, 34, 17, 136, 119, 102, 85, 187, 204, 221, 238, 120, 136, 153, 170}, `msg: trice64_2  -> normal trice function (with cycle counter) for everywhere                   1122334455667788 -1122334455667788`},
	{[]byte{184, 124, 227, 255, 25, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 25`},
	{[]byte{185, 251, 56, 135, 42, 26, 26, 0}, `msg:  TRICE8_3i -> normal trice macro    (with cycle counter) for only inside critical section 1a 1A 42`},
	{[]byte{186, 251, 181, 135, 42, 26, 26, 0}, `msg:  trice8_3i -> normal trice function (with cycle counter) for only inside critical section 1a 1A 42`},
	{[]byte{187, 15, 23, 133, 249, 255, 6, 0, 26, 0, 26, 0, 42, 0, 0, 0}, `msg: TRICE16_3i -> normal trice macro    (with cycle counter) for only inside critical section 1a 1A 42`},
	{[]byte{188, 71, 203, 133, 249, 255, 6, 0, 52, 18, 52, 18, 52, 18, 0, 0}, `msg: trice16_3i -> normal trice function (with cycle counter) for only inside critical section 1234 1234 4660`},
	{[]byte{189, 79, 21, 135, 243, 255, 12, 0, 52, 18, 0, 0, 52, 18, 0, 0, 52, 18, 0, 0}, `msg: TRICE32_3i -> normal trice macro    (with cycle counter) for only inside critical section 1234 1234 4660`},
	{[]byte{190, 47, 108, 134, 243, 255, 12, 0, 68, 51, 34, 17, 68, 51, 34, 17, 136, 119, 102, 85}, `msg: trice32_3i -> normal trice function (with cycle counter) for only inside critical section 11223344 11223344 1432778632`},
	{[]byte{191, 67, 59, 134, 42, 26, 26, 0}, `msg:  TRICE8_3  -> normal trice macro    (with cycle counter) for everywhere                   1a 1A 42`},
	{[]byte{192, 19, 160, 135, 42, 26, 26, 0}, `msg:  trice8_3  -> normal trice function (with cycle counter) for everywhere                   1a 1A 42`},
	{[]byte{193, 223, 232, 133, 249, 255, 6, 0, 52, 18, 52, 18, 52, 18, 0, 0}, `msg: TRICE16_3  -> normal trice macro    (with cycle counter) for everywhere                   1234 1234 4660`},
	{[]byte{194, 247, 63, 132, 249, 255, 6, 0, 52, 18, 52, 18, 52, 18, 0, 0}, `msg: trice16_3  -> normal trice function (with cycle counter) for everywhere                   1234 1234 4660`},
	{[]byte{195, 175, 138, 132, 243, 255, 12, 0, 68, 51, 34, 17, 68, 51, 34, 17, 136, 119, 102, 85}, `msg: TRICE32_3  -> normal trice macro    (with cycle counter) for everywhere                   11223344 11223344 1432778632`},
	{[]byte{196, 239, 46, 135, 243, 255, 12, 0, 68, 51, 34, 17, 68, 51, 34, 17, 136, 119, 102, 85}, `msg: trice32_3  -> normal trice function (with cycle counter) for everywhere                   11223344 11223344 1432778632`},
	{[]byte{197, 124, 227, 255, 26, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 26`},
	{[]byte{198, 148, 9, 134, 42, 26, 26, 26}, `msg:  TRICE8_4i -> normal trice macro    (with cycle counter) for only inside critical section 1a 1A 26 42`},
	{[]byte{199, 52, 81, 134, 42, 26, 26, 26}, `msg:  trice8_4i -> normal trice function (with cycle counter) for only inside critical section 1a 1A 26 42`},
	{[]byte{200, 95, 226, 133, 247, 255, 8, 0, 26, 0, 26, 0, 42, 0, 26, 0}, `msg: TRICE16_4i -> normal trice macro    (with cycle counter) for only inside critical section 1a 1A 26 42`},
	{[]byte{201, 31, 201, 133, 247, 255, 8, 0, 52, 18, 52, 18, 52, 18, 52, 18}, `msg: trice16_4i -> normal trice function (with cycle counter) for only inside critical section 1234 1234 4660 4660`},
	{[]byte{202, 39, 25, 133, 239, 255, 16, 0, 52, 18, 0, 0, 52, 18, 0, 0, 52, 18, 0, 0, 52, 18, 0, 0}, `msg: TRICE32_4i -> normal trice macro    (with cycle counter) for only inside critical section 1234 1234 4660 4660`},
	{[]byte{203, 247, 144, 133, 239, 255, 16, 0, 68, 51, 34, 17, 68, 51, 34, 17, 68, 51, 34, 17, 136, 119, 102, 85}, `msg: trice32_4i -> normal trice function (with cycle counter) for only inside critical section 11223344 11223344 287454020 1432778632`},
	{[]byte{204, 116, 197, 132, 42, 26, 26, 26}, `msg:  TRICE8_4  -> normal trice macro    (with cycle counter) for everywhere                   1a 1A 26 42`},
	{[]byte{205, 76, 169, 134, 42, 26, 26, 26}, `msg:  trice8_4  -> normal trice function (with cycle counter) for everywhere                   1a 1A 26 42`},
	{[]byte{206, 247, 40, 133, 247, 255, 8, 0, 52, 18, 52, 18, 52, 18, 52, 18}, `msg: TRICE16_4  -> normal trice macro    (with cycle counter) for everywhere                   1234 1234 4660 4660`},
	{[]byte{207, 167, 210, 134, 247, 255, 8, 0, 52, 18, 52, 18, 52, 18, 52, 18}, `msg: trice16_4  -> normal trice function (with cycle counter) for everywhere                   1234 1234 4660 4660`},
	{[]byte{208, 7, 233, 133, 239, 255, 16, 0, 68, 51, 34, 17, 68, 51, 34, 17, 68, 51, 34, 17, 136, 119, 102, 85}, `msg: TRICE32_4  -> normal trice macro    (with cycle counter) for everywhere                   11223344 11223344 287454020 1432778632`},
	{[]byte{209, 71, 217, 135, 239, 255, 16, 0, 68, 51, 34, 17, 68, 51, 34, 17, 68, 51, 34, 17, 136, 119, 102, 85}, `msg: trice32_4  -> normal trice function (with cycle counter) for everywhere                   11223344 11223344 287454020 1432778632`},
	{[]byte{210, 124, 227, 255, 27, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 27`},
	{[]byte{211, 191, 219, 134, 250, 255, 5, 0, 74, 58, 42, 26, 90, 0, 0, 0}, `msg:  TRICE8_5i -> normal trice macro    (with cycle counter) for only inside critical section 1a 2A 58 74 90`},
	{[]byte{212, 239, 135, 133, 250, 255, 5, 0, 74, 58, 42, 26, 90, 0, 0, 0}, `msg:  trice8_5i -> normal trice function (with cycle counter) for only inside critical section 1a 2A 58 74 90`},
	{[]byte{213, 215, 220, 134, 250, 255, 5, 0, 74, 58, 42, 26, 90, 0, 0, 0}, `msg:  TRICE8_5  -> normal trice macro    (with cycle counter) for everywhere                   1a 2A 58 74 90`},
	{[]byte{214, 7, 44, 132, 250, 255, 5, 0, 74, 58, 42, 26, 90, 0, 0, 0}, `msg:  trice8_5  -> normal trice function (with cycle counter) for everywhere                   1a 2A 58 74 90`},
	{[]byte{215, 124, 227, 255, 28, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 28`},
	{[]byte{216, 151, 50, 134, 249, 255, 6, 0, 74, 58, 42, 26, 106, 90, 0, 0}, `msg:  TRICE6_5i -> normal trice macro    (with cycle counter) for only inside critical section 1a 2A 58 74 5a 6A`},
	{[]byte{217, 159, 157, 135, 249, 255, 6, 0, 74, 58, 42, 26, 106, 90, 0, 0}, `msg:  trice6_5i -> normal trice function (with cycle counter) for only inside critical section 1a 2A 58 74 5a 6A`},
	{[]byte{218, 87, 51, 133, 249, 255, 6, 0, 74, 58, 42, 26, 106, 90, 0, 0}, `msg:  TRICE6_5  -> normal trice macro    (with cycle counter) for everywhere                   1a 2A 58 74 5a 6A`},
	{[]byte{219, 223, 196, 134, 249, 255, 6, 0, 74, 58, 42, 26, 106, 90, 0, 0}, `msg:  trice6_5  -> normal trice function (with cycle counter) for everywhere                   1a 2A 58 74 5a 6A`},
	{[]byte{220, 124, 227, 255, 29, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 29`},
	{[]byte{221, 103, 174, 135, 248, 255, 7, 0, 74, 58, 42, 26, 122, 106, 90, 0}, `msg:  TRICE8_7i -> normal trice macro    (with cycle counter) for only inside critical section 1a 2A 58 74 5a 6A 122`},
	{[]byte{222, 127, 206, 132, 248, 255, 7, 0, 74, 58, 42, 26, 122, 106, 90, 0}, `msg:  trice8_7i -> normal trice function (with cycle counter) for only inside critical section 1a 2A 58 74 5a 6A 122`},
	{[]byte{223, 199, 152, 133, 248, 255, 7, 0, 74, 58, 42, 26, 122, 106, 90, 0}, `msg:  TRICE8_7  -> normal trice macro    (with cycle counter) for everywhere                   1a 2A 58 74 5a 6A 122`},
	{[]byte{224, 215, 227, 134, 248, 255, 7, 0, 74, 58, 42, 26, 122, 106, 90, 0}, `msg:  trice8_7  -> normal trice function (with cycle counter) for everywhere                   1a 2A 58 74 5a 6A 122`},
	{[]byte{225, 124, 227, 255, 30, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 30`},
	{[]byte{226, 87, 144, 132, 247, 255, 8, 0, 74, 58, 42, 26, 138, 122, 106, 90}, `msg:  TRICE8_8i -> normal trice macro    (with cycle counter) for only inside critical section 1a 2A 58 74 5a 6A 122 -118`},
	{[]byte{227, 135, 203, 133, 247, 255, 8, 0, 74, 58, 42, 26, 138, 122, 106, 90}, `msg:  trice8_8i -> normal trice function (with cycle counter) for only inside critical section 1a 2A 58 74 5a 6A 122 -118`},
	{[]byte{228, 191, 237, 135, 247, 255, 8, 0, 74, 58, 42, 26, 138, 122, 106, 90}, `msg:  TRICE8_8  -> normal trice macro    (with cycle counter) for everywhere                   1a 2A 58 74 5a 6A 122 -118`},
	{[]byte{229, 71, 233, 133, 247, 255, 8, 0, 74, 58, 42, 26, 138, 122, 106, 90}, `msg:  trice8_8  -> normal trice function (with cycle counter) for everywhere                   1a 2A 58 74 5a 6A 122 -118`},
	{[]byte{230, 124, 227, 255, 31, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 31`},
	{[]byte{231, 124, 227, 255, 0, 0, 120, 3}, `MSG: triceFifoMaxDepth = 888, select = 0`},
}

var tableB = testTable{ // big endian

}
