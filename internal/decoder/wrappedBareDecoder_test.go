// Copyright 2020 Thomas.Hoehenleitner [at] seerose.net
// Use of this source code is governed by a license that can be found in the LICENSE file.

package decoder

import (
	"fmt"
	"testing"

	"github.com/rokath/trice/internal/receiver"
	"github.com/stretchr/testify/assert"
)

var byteStreamWrap = string([]byte{
	235, 96, 96, 121, 161, 51, 255, 255, // TRICE8_1 -1
	235, 96, 96, 83, 112, 201, 255, 254, // TRICE8_2 -1 -2
	235, 96, 96, 234, 0, 0, 255, 254,
	235, 96, 96, 27, 72, 69, 253, 0, // TRICE8_3 -1 -2 -3
	235, 96, 96, 234, 0, 0, 255, 254,
	235, 96, 96, 46, 136, 76, 253, 252, // TRICE8_4 -1 -2 -3 -4
	235, 96, 96, 234, 0, 0, 255, 254,
	235, 96, 96, 234, 0, 0, 253, 252,
	235, 96, 96, 236, 7, 251, 251, 0, // TRICE8_5 -1 -2 -3 -4 -5
	235, 96, 96, 234, 0, 0, 255, 254,
	235, 96, 96, 234, 0, 0, 253, 252,
	235, 96, 96, 245, 141, 146, 251, 250, // TRICE8_6 -1 -2 -3 -4 -5 -6
	235, 96, 96, 234, 0, 0, 255, 254,
	235, 96, 96, 234, 0, 0, 253, 252,
	235, 96, 96, 234, 0, 0, 251, 250,
	235, 96, 96, 219, 90, 147, 249, 0, // TRICE8_7 -1 -2 -3 -4 -5 -6 -7
	235, 96, 96, 234, 0, 0, 255, 254,
	235, 96, 96, 234, 0, 0, 253, 252,
	235, 96, 96, 234, 0, 0, 251, 250,
	235, 96, 96, 97, 20, 159, 249, 248, // TRICE8_8 -1 -2 -3 -4 -5 -6 -7 -8
	235, 96, 96, 13, 199, 33, 255, 255, // TRICE16_1 -1
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 100, 254, 112, 255, 254, // TRICE16_2 -1 -2
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 234, 0, 0, 255, 254,
	235, 96, 96, 44, 230, 35, 255, 253, // TRICE16_3 -1 -2 -3
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 234, 0, 0, 255, 254,
	235, 96, 96, 233, 0, 0, 255, 253,
	235, 96, 96, 101, 176, 61, 255, 252, //TRICE16_4 -1 -2 -3 -4
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 3, 24, 240, 255, 255, //  TRICE32_1 -1
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 55, 44, 241, 255, 254, // TRICE32_2 -1 -2
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 234, 0, 0, 255, 254,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 79, 219, 125, 255, 253, // TRICE32_3 -1 -2 -3
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 234, 0, 0, 255, 254,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 233, 0, 0, 255, 253,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 187, 142, 221, 255, 252, //TRICE32_4 -1 -2 -3 -4
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 224, 168, 163, 255, 255, // TRICE64_1 -1
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 235, 0, 0, 255, 255,
	235, 96, 96, 24, 32, 210, 255, 254, // TRICE64_2 -1 -2
})

func _TestWrap(t *testing.T) {

	// rc is created ReadCloser
	rc, err := receiver.NewReader("BUFFER", byteStreamWrap)
	if err != nil {
		t.Fail()
	}

	list, err := UnmarshalTriceIDList([]byte(til))
	if err != nil {
		t.Fail()
	}

	p := NewBareDecoder(list, NewBareReaderFromWrap(rc), littleEndian) // p is a new decoder instance

	ss := make([]string, 100)
	n, err := p.StringsRead(ss)
	if err != nil {
		t.Fail()
	}
	ss = ss[:n]
	act := fmt.Sprintln(ss)
	exp := "[tst:TRICE8_1 -1\\n tst:TRICE8_2 -1 -2\\n tst:TRICE8_3 -1 -2 -3\\n tst:TRICE8_4 -1 -2 -3 -4\\n tst:TRICE8_5 -1 -2 -3 -4 -5\\n tst:TRICE8_6 -1 -2 -3 -4 -5 -6\\n tst:TRICE8_7 -1 -2 -3 -4 -5 -6 -7\\n tst:TRICE8_8 -1 -2 -3 -4 -5 -6 -7 -8\\n tst:TRICE16_1 -1\\n tst:TRICE16_2 -1 -2\\n tst:TRICE16_3 -1 -2 -3\\n tst:TRICE16_4 -1 -2 -3 -4\\n tst:TRICE32_1 -1\\n tst:TRICE32_2 -1 -2\\n tst:TRICE32_3 -1 -2 -3\\n tst:TRICE32_4 -1 -2 -3 -4\\n tst:TRICE64_1 -1\\n tst:TRICE64_2 -1 -2\\n]\n"
	assert.Equal(t, exp, act)
}
